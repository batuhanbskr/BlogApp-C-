#pragma checksum "C:\Users\User\Desktop\SOFTWARE\ASP.NET\CoreDemo\CoreDemo\Areas\Admin\Views\Writer\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "67a6e5a797e3a04c1ca636f75df7668c06bea2e5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_Writer_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/Writer/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"67a6e5a797e3a04c1ca636f75df7668c06bea2e5", @"/Areas/Admin/Views/Writer/Index.cshtml")]
    #nullable restore
    public class Areas_Admin_Views_Writer_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\User\Desktop\SOFTWARE\ASP.NET\CoreDemo\CoreDemo\Areas\Admin\Views\Writer\Index.cshtml"
  
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/AdminLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h1>Yazar Ajax İşlmeleri</h1>
<br />
<button type=""button"" id=""btngetlist"" class=""btn btn-outline-primary"">Yazar Listesi</button>
<br />
<div id=""writerlist"">
    Buraya Yazarlar gelecek
</div>
<br />
<div id=""writerget"">
    Buraya Yazar 1 yazar gelecek.
</div>
<br />
<div>
    <input type=""text"" id=""writerid"" class=""form-control"" placeholder=""Yazar ID değerini girin""/>
</div>
<br />
<button type=""button"" id=""btngetbyid"" class=""btn btn-outline-success"">Yazar Getir</button>
<br />
<div>
    <input type=""text"" class=""form-control"" id=""txtwriterid"" placeholder=""Yazar ID""/>

    <input type=""text"" class=""form-control"" id=""txtwritername"" placeholder=""Yazar Adı"" />
    <br />
    <button type=""button"" id=""btnaddwriter"" class=""btn btn-outline-success"">Yazar Ekle</button>
</div>

<div>
    <input type=""text"" class=""form-control"" id=""txtwriterdeleteid"" placeholder=""Silinecek Yazar ID"" />
    <button type=""button"" id=""btndeletewriter"" class=""btn btn-outline-success"">Yazar Sil</button>
</");
            WriteLiteral(@"div>
<br />
<input type=""text"" id=""txtid1"" class=""form-control"" placeholder=""Güncellenecek Id""/>
<input type=""text"" id=""txtwritername1"" class=""form-control"" placeholder=""Güncellenecek İsim"" />
<button type=""button"" id=""btnupdatewriter"" class=""btn btn-outline-success"">Yazar Güncelle</button>
");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        $(""#btngetlist"").click(function () {
            $.ajax({
                contentType: ""application/json"",
                dataType: ""json"",
                type: ""get"",
                url: ""/Admin/Writer/WriterList"",
                success: function (func) {
                    let w = jQuery.parseJSON(func);
                    let tablehtml = ""<table class='table table-bordered'> <tr> <th>Yazar ID</th> <th>Yazar Adı</th> </tr>"";
                    $.each(w, (index, value) => {
                        tablehtml += `<tr><td>${value.Id}</td> <td>${value.Name}</td> </tr>`
                    });
                    tablehtml += ""</table>"";
                    $(""#writerlist"").html(tablehtml);
                }
            });
        });

        $(""#btngetbyid"").click(x => {
            let id = $(""#writerid"").val();

            $.ajax({
                contentType: ""application/json"",
                dataType: ""json"",
                type: ""GET"",
         ");
                WriteLiteral(@"       url: `/Admin/Writer/GetWriterByID/${id}`,
                success: function (func) {
                    //parseJSON a normalde gerek yok çünkü dataType zaten json türünde
                    let writer = jQuery.parseJSON(func);
                    
                    let getValue = `<table class='table table-bordered'> <tr> <th>Yazar ID</th> <th>Yazar Adı</th> </tr> <tr> <td>${writer.Id}</td><td>${writer.Name}</td></tr></table>`;
                    $(""#writerget"").html(getValue);
                }
            })
        })

        $(""#btnaddwriter"").click(function () {
            let writer = {
                Id: $(""#txtwriterid"").val(),
                Name: $(""#txtwritername"").val()
            };
            
            $.ajax({
                type: ""post"",
                url: ""/Admin/Writer/AddWriter"",
                data: writer,
                success: function (response) {
                    console.log(""Başarılı işlem, gelen cevap:"", response); // Konsolda kont");
                WriteLiteral(@"rol edin
                    alert(""Yazar ekleme işlemi başarılı bir şekilde gerçekleşti"");
                },
                error: function (xhr, status, error) {
                    console.log(""Hata oluştu:"", error); // Hata durumlarını kontrol edin
                }
            })
        })

        $(""#btndeletewriter"").click(function () {
            let writer = {
                Id: $(""#txtwriterdeleteid"").val()
            };

            $.ajax({
                type: ""post"",
                url: ""/Admin/Writer/DeleteWriter"",
                data: writer,
                success: function (func) {
                    alert(""Yazar silme işlemi başarılı bir şekilde gerçekleşti"");
                },
                error: function (xhr, status, error) {
                    console.log(""Hata oluştu:"", error); // Hata durumlarını kontrol edin
                }
            })
        })

        $(""#btnupdatewriter"").click(function () {
            let writer = {
          ");
                WriteLiteral(@"      Id: $(""#txtid1"").val(),
                Name: $(""#txtwritername1"").val()
            };

            $.ajax({
                type: ""post"",
                url: ""/Admin/Writer/UpdateWriter"",
                data: writer,
                success: function (func) {
                    alert(""Yazar güncelleme işlemi başarılı bir şekilde gerçekleşti"");
                },
                error: function (xhr, status, error) {
                    console.log(""Hata oluştu:"", error); // Hata durumlarını kontrol edin
                }
            })
        })
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
